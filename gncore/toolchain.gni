# Copyright (c) 2019 Alfredo Mazzinghi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Private c_toolchain environment args.
# These are set by the current c_toolchain::toolchain_args.
declare_args() {
  # Current toolchain sysroot.
  _gncore_c_toolchain_sysroot = "__INVALID__"

  # Current toolchain objdump.
  _gncore_c_toolchain_objdump = "__INVALID__"

  # Current toolchain objcopy.
  _gncore_c_toolchain_objcopy = "__INVALID__"

  # Current toolchain default output dir.
  _gncore_c_toolchain_default_output_dir = "__INVALID__"
}

# Relative path of the gncore tree wrt the build top level
_gncore_base = rebase_path(".", "//")

# Base toolchain definition for C and C++.
# Note that this assumes that the toolchain accepts gcc-like flags.
# Note that this currently assumes a UNIX environment for the stamp and copy
# tools.
#
# Arguments:
# tool_cc: string
#     tool to use to compile C files
# tool_cxx: string
#     tool to use to compile C++ files
# tool_ar: string
#     tool to use to archive static libraries
# tool_link: string
#     tool to use to link executables
# tool_solink: string
#     tool to use to link shared libraries
# tool_objdump: string
#     tool to use for objdump targets
# tool_objcopy: string
#     tool to use for objcopy targets
# toolchain_args: scope
#     extra toolchain_args definitions
# [sysroot]: string
#     optional toolchain base path
#
# This creates the toolchain with the given ${target_name},
# the objdump, objcopy and ld tools are used to configure the
# respective templates for the current toolchain.
template("c_toolchain") {
  assert(defined(invoker.tool_cc), "c_toolchain::tool_cc must be defined")
  assert(defined(invoker.tool_cxx), "c_toolchain::tool_cxx must be defined")
  assert(defined(invoker.tool_ar), "c_toolchain::tool_ar must be defined")
  assert(defined(invoker.tool_link), "c_toolchain::tool_link must be defined")
  assert(defined(invoker.tool_solink),
         "c_toolchain::tool_solink must be defined")
  assert(defined(invoker.tool_objdump),
         "c_toolchain::tool_objdump must be defined")
  assert(defined(invoker.tool_objcopy),
         "c_toolchain::tool_objcopy must be defined")
  assert(defined(invoker.toolchain_args),
         "c_toolchain::toolchain_args must be defined")

  sysroot = ""
  prefix = ""
  if (defined(invoker.sysroot)) {
    sysroot = invoker.sysroot
    prefix = "${sysroot}/"
  }

  tool_cc = "${prefix}${invoker.tool_cc}"
  tool_cxx = "${prefix}${invoker.tool_cxx}"
  tool_link = "${prefix}${invoker.tool_link}"
  tool_solink = "${prefix}${invoker.tool_solink}"
  tool_ar = "${prefix}${invoker.tool_ar}"

  tool_objdump = "${prefix}${invoker.tool_objdump}"
  tool_objcopy = "${prefix}${invoker.tool_objcopy}"

  dep_pattern = "{{output}}.d"

  toolchain(target_name) {
    tool("cc") {
      description = "CC {{output}}"
      command = "${tool_cc} -MMD -MF ${dep_pattern} {{include_dirs}} {{defines}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depfile = dep_pattern
      depsformat = "gcc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    tool("cxx") {
      description = "CXX {{output}}"
      command = "${tool_cxx} -MMD -MF ${dep_pattern} {{include_dirs}} {{defines}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depfile = dep_pattern
      depsformat = "gcc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    tool("asm") {
      description = "ASM {{output}}"
      command = "${tool_cc} -MMD -MF ${dep_pattern} {{include_dirs}} {{defines}} {{asmflags}} -S {{source}} -o {{output}}"
      depfile = dep_pattern
      depsformat = "gcc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    tool("link") {
      description = "LINK {{output}}"

      # default_output_dir = "{{root_out_dir}}/${target_name}"
      default_output_dir = "{{root_out_dir}}"
      exename = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/${exename}"
      rspfile = "${outfile}.rsp"
      rspfile_content = "{{inputs}} {{solibs}} {{libs}}"
      command = "${tool_link} {{ldflags}} -o {{output}} -Wl,--start-group @\"${rspfile}\" -Wl,--end-group"
      outputs = [
        outfile,
      ]
    }

    tool("solink") {
      description = "LINK {{output}}"

      # default_output_dir = "{{root_out_dir}}/${target_name}"
      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".so"
      output_prefix = "lib"
      soname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/${soname}"
      rspfile = "${outfile}.rsp"
      rspfile_content = "{{inputs}}"
      command = "${tool_solink} {{ldflags}} -o {{output}} -Wl,--start-group @\"${rspfile}\" -Wl,--end-group {{solibs}} {{libs}}"

      outputs = [
        outfile,
      ]
    }

    tool("alink") {
      description = "AR {{output}}"

      # default_output_dir = "{{root_out_dir}}/${target_name}"
      default_output_dir = "{{root_out_dir}}"
      default_output_extension = ".a"
      output_prefix = "lib"
      aname = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/${aname}"
      rspfile = "${outfile}.rsp"
      rspfile_content = "{{inputs}}"
      command = "${tool_ar} {{arflags}} -r -c -s -D {{output}} @\"${rspfile}\""

      outputs = [
        outfile,
      ]
    }

    tool("stamp") {
      description = "STAMP {{output}}"
      command = "touch {{output}}"
    }

    tool("copy") {
      description = "COPY {{source}} {{output}}"
      command = "cp -af {{source}} {{output}}"
    }

    toolchain_args = {
      forward_variables_from(invoker.toolchain_args, "*")

      # Set gncore c_toolchain environment
      _gncore_c_toolchain_sysroot = sysroot
      _gncore_c_toolchain_objcopy = tool_objcopy
      _gncore_c_toolchain_objdump = tool_objdump
      _gncore_c_toolchain_default_output_dir = "${root_out_dir}/${target_name}"
    }
  }
}

# Helper template for extra toolchain tools
# This creates an action target template to run a tool on a specified file.
#
# Arguments:
# tool_path: string
#     path of the tool to invoke
# args: string
#     extra arguments
# source_labels: [string]
#     list of input labels.
# sources: [string]
#     list of input files. The path should have already been resolved and
#     be suitable to rebase.
# output: string
#     output file
# output_mode: string {"none", "stdout", "append"}
#     how to handle the output argument of the tool:
#     none -> no handling, invoker is supposed to place it in the args string.
#     stdout -> tool stdout redirected to the output file.
#     append -> output file appended as the last item of the argument string.
# [output_dir]: string
#     override the default toolchain output directory for output file(s).
# [deps, testonly]
template("c_toolchain_tool") {
  assert(defined(invoker.tool_path), "c_toolchain::tool_path must be specified")
  assert(defined(invoker.args), "c_toolchain_tool::args must be defined")
  assert(
      defined(invoker.sources) || defined(invoker.source_labels),
      "c_toolchain_tool::sources or c_toolchain_tool::source_labels must be defined")
  assert(defined(invoker.output), "c_toolchain_tool::output must be defined")
  assert(defined(invoker.output_mode),
         "c_toolchain_tool::output_mode must be defined")

  action(target_name) {
    script = "//${_gncore_base}/scripts/invoke.py"

    # Generate output arguments
    # output_dir = _gncore_c_toolchain_default_output_dir
    # if (defined(invoker.output_dir)) {
    #   output_dir = invoker.output_dir
    # }
    output_path = "${root_out_dir}/${invoker.output}"
    output_args = []
    if (invoker.output_mode == "stdout") {
      output_args = [
        "--stdout",
        rebase_path(output_path),
      ]
    } else if (invoker.output_mode == "append") {
      output_args = [ rebase_path(output_path) ]
    }

    # Generate source arguments
    sources = []
    source_paths = []

    if (defined(invoker.sources)) {
      sources += invoker.sources
      source_paths = rebase_path(invoker.sources)
    }
    if (defined(invoker.source_labels)) {
      foreach(src, invoker.source_labels) {
        label_name = get_label_info(src, "name")
        label_path = "${root_out_dir}/${label_name}"
        sources += [ label_path ]
        source_paths += [ rebase_path(label_path) ]
      }
    }

    # Generate common invoke arguments
    args = [
      invoker.tool_path,
      string_replace(invoker.args, "-", "%OPT%"),
    ]
    args += source_paths
    args += output_args

    # Fill in the action sources and outputs
    outputs = [
      output_path,
    ]

    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                           ])
  }
}

# Objdump action for the current toolchain. Note that the toolchain
# must have been created with :c_toolchain.
# This creates an action target template to run the toolchain
# objdump and redirect the output to a given file.
#
# Arguments:
# c_toolchain_tool::{args, source_labels, sources, output, output_dir, deps, testonly}
template("objdump") {
  c_toolchain_tool(target_name) {
    tool_path = _gncore_c_toolchain_objdump
    output_mode = "stdout"
    forward_variables_from(invoker,
                           [
                             "args",
                             "source_labels",
                             "sources",
                             "output",
                             "output_dir",
                             "deps",
                             "testonly",
                           ])
  }
}

# Objcopy action for the current toolchain. Note that the toolchain
# must have been created with :c_toolchain.
# This creates an action target template to run the toolchain
# objcopy on a specified file.
#
# Arguments:
# c_toolchain_tool::{args, source_labels, sources, output, output_dir, deps, testonly}
template("objcopy") {
  c_toolchain_tool(target_name) {
    tool_path = _gncore_c_toolchain_objcopy
    output_mode = "append"
    forward_variables_from(invoker,
                           [
                             "args",
                             "source_labels",
                             "sources",
                             "output",
                             "output_dir",
                             "deps",
                             "testonly",
                           ])
  }
}

# Helper for the common host toolchain definition based on the
# default system cc and c++ symlinks.
#
# Arguments:
# c_toolchain::{[toolchain_args]}
template("host_c_toolchain") {
  c_toolchain(target_name) {
    tool_cc = "cc"
    tool_cxx = "c++"
    tool_ar = "ar"
    tool_link = tool_cxx
    tool_solink = tool_cxx
    tool_objdump = "objdump"
    tool_objcopy = "objcopy"

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }
  }
}

# Helper for a common gcc toolchain definition
#
# Arguments:
# c_toolchain::{sysroot, [toolchain_args]}
template("gcc_toolchain") {
  c_toolchain(target_name) {
    tool_cc = "gcc"
    tool_cxx = "g++"
    tool_ar = "ar"
    tool_link = tool_cxx
    tool_solink = tool_cxx
    tool_objdump = "objdump"
    tool_objcopy = "objcopy"

    forward_variables_from(invoker, "sysroot")

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }
  }
}

# Helper for a common clang toolchain definition
#
# Arguments:
# c_toolchain::{sysroot, [toolchain_args]}
template("clang_toolchain") {
  c_toolchain(target_name) {
    tool_cc = "clang"
    tool_cxx = "clang++"
    tool_ar = "llvm-ar"
    tool_link = tool_cxx
    tool_solink = tool_cxx
    tool_objdump = "llvm-objdump"
    tool_objcopy = "llvm-objcopy"

    forward_variables_from(invoker, "sysroot")

    toolchain_args = {
      if (defined(invoker.toolchain_args)) {
        forward_variables_from(invoker.toolchain_args, "*")
      }
    }
  }
}
